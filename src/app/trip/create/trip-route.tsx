"use client"

// 1. [‡πÄ‡∏û‡∏¥‡πà‡∏°] import useState ‡πÅ‡∏•‡∏∞ icons
import React from "react"
import { useEffect, useRef, useState } from "react" 
import maplibregl, { LngLatLike, Map } from "maplibre-gl"
// üëà [‡πÄ‡∏û‡∏¥‡πà‡∏°] ChevronDown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown
import { X, Calendar, Clock, Navigation, ChevronDown } from "lucide-react" 

// Prop types (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
interface TripEventPoint {
  lat: number;
  lng: number;
  title: string;
  time: string;
  date: string;
}

interface TripRouteDisplayProps {
  events: TripEventPoint[];
  onClose: () => void;
}

// ----------------------------------------------------
// 2. [‡πÄ‡∏û‡∏¥‡πà‡∏°] Constants ‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
// ----------------------------------------------------
const ROUTE_SOURCE_ID = "trip-route-source";
const ROUTE_LAYER_ID = "trip-route-line";
// üëà [REQ 1] ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
const LEG_COLORS = ["#3883F8", "#F59E0B", "#E11D48", "#16A34A", "#9333EA", "#0891B2"];


// ----------------------------------------------------
// 3. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î drawRoute ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå
// ----------------------------------------------------
function translateInstruction(text: string): string {
  let t = text.trim();

  // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á
  t = t
    .replace(/\bleft depart\b/gi, "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢")
    .replace(/\bright depart\b/gi, "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤");

  // ‡∏ó‡∏≤‡∏á‡πÅ‡∏¢‡∏Å (fork)
  t = t
    .replace(/\bslight left fork\b/gi, "‡πÅ‡∏¢‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
    .replace(/\bslight right fork\b/gi, "‡πÅ‡∏¢‡∏Å‡∏Ç‡∏ß‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
    .replace(/\bleft fork\b/gi, "‡πÅ‡∏¢‡∏Å‡∏ã‡πâ‡∏≤‡∏¢")
    .replace(/\bright fork\b/gi, "‡πÅ‡∏¢‡∏Å‡∏Ç‡∏ß‡∏≤");

  // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ñ‡∏ô‡∏ô
  t = t
    .replace(/\bleft end of road\b/gi, "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ñ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢")
    .replace(/\bright end of road\b/gi, "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ñ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤");

  // ‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏õ‡∏Å‡∏ï‡∏¥
  t = t
    .replace(/\bslight left turn\b/gi, "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
    .replace(/\bslight right turn\b/gi, "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
    .replace(/\bleft turn\b/gi, "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢")
    .replace(/\bright turn\b/gi, "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏Ç‡∏ß‡∏≤");

  // ‡∏ó‡∏≤‡∏á‡∏ï‡∏£‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà
  t = t
    .replace(/\bstraight new name\b/gi, "‡∏ï‡∏£‡∏á‡πÑ‡∏õ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà)")
    .replace(/\bstraight turn\b/gi, "‡∏ï‡∏£‡∏á‡πÑ‡∏õ");

  // ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
  t = t
    .replace(/\bleft arrive\b/gi, "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢")
    .replace(/\bright arrive\b/gi, "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤")
    .replace(/\barrive\b/gi, "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢");

  // ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°
  t = t.replace(/\bon\b/gi, "‡∏ö‡∏ô");
  t = t.replace(/\b(m)\b/gi, "‡πÄ‡∏°‡∏ï‡∏£");

  return t;
}

// const translateType = (instruction) => {
//   return instruction
//     .replace(/\bdepart\b/gi, "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏ó‡∏≤‡∏á")
//     .replace(/\bleft turn\b/gi, "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢")
//     .replace(/\ left turn\b/gi, "‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏ß‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
//     .replace(/\ arrive\b/gi, "‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ã‡πâ‡∏≤‡∏¢");

// }

const drawRoute = async (map: Map, points: TripEventPoint[]): Promise<any[]> => {
  if (points.length < 2) return [];
  
  const coordsString = points.map(p => `${p.lng},${p.lat}`).join(';');
  // üëà [REQ 2] ‡πÄ‡∏û‡∏¥‡πà‡∏° 'steps=true' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• turn-by-turn
  const url = `https://router.project-osrm.org/route/v1/driving/${coordsString}?overview=full&geometries=geojson&annotations=duration,distance&steps=true`;
  
  try {
    const res = await fetch(url);
    const data = await res.json();
    const route = data?.routes?.[0];
    if (!route) return [];

    // --- ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å) ---
    const style = map.getStyle();
    if (style && style.layers) {
        style.layers.map(layer => layer.id)
            .filter(id => id.startsWith(ROUTE_LAYER_ID))
            .forEach(id => { if (map.getLayer(id)) map.removeLayer(id) });
    }
    if (style && style.sources) {
        Object.keys(style.sources)
            .filter(id => id.startsWith(ROUTE_SOURCE_ID))
            .forEach(id => { if (map.getSource(id)) map.removeSource(id) });
    }
    // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏ö ---

    // üëà [REQ 1] ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á Layer ‡πÅ‡∏¢‡∏Å‡∏™‡∏µ
    route.legs.forEach((leg: any, index: number) => {
      const legCoords = leg.steps.flatMap((step: any) => step.geometry.coordinates);
      if (legCoords.length === 0) return;
      
      const sourceId = `${ROUTE_SOURCE_ID}-${index}`;
      const layerId = `${ROUTE_LAYER_ID}-${index}`;
      const color = LEG_COLORS[index % LEG_COLORS.length]; // üëà ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ
      
      const geojson = {
        type: "Feature" as const,
        geometry: { type: "LineString" as const, coordinates: legCoords },
        properties: {},
      };
      
      map.addSource(sourceId, { type: "geojson", data: geojson });
      map.addLayer({
        id: layerId,
        type: "line",
        source: sourceId,
        paint: {
          "line-color": color, // üëà ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
          "line-width": 6,
          "line-opacity": 0.85,
        },
        layout: { "line-join": "round", "line-cap": "round" }
      });
    });

    // üëá [‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô return]
    route.legs.forEach((leg: any) => {
      // console.log("route", leg.steps)
      leg.steps.forEach((step: any) => {
        // console.log(step.maneuver)
        // step.maneuver.modifier = ""
        // step.maneuver.type = ""
        // if (step.maneuver && step.maneuver.instruction) {
        //   step.maneuver.instruction = translateInstruction(step.maneuver.instruction);
        // }
      });
    });

    return route.legs || []; // üëà [REQ 2] return 'legs' ‡∏ó‡∏µ‡πà‡∏°‡∏µ 'steps'

  } catch (e) { 
    console.error("Route draw error:", e); 
    return [];
  }
}

// ----------------------------------------------------
// 4. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏° State ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Component
// ----------------------------------------------------
export default function TripRouteDisplay({ events, onClose }: TripRouteDisplayProps) {
  const mapContainer = useRef<HTMLDivElement>(null)
  const mapRef = useRef<Map | null>(null)
  const markersRef = useRef<maplibregl.Marker[]>([]); 
  
  const [routeLegs, setRouteLegs] = useState<any[]>([]);
  // üëà [REQ 3] State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡πà‡∏≤ Dropdown ‡πÑ‡∏´‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
  const [openLegIndex, setOpenLegIndex] = useState<number | null>(null);

  
  // Effect "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà" (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    if (!mapContainer.current || mapRef.current) return; 

    const map = new maplibregl.Map({
      container: mapContainer.current,
      style: "https://tiles.stadiamaps.com/styles/osm_bright.json",
      center: [100.5231, 13.7367],
      zoom: 9,
    });
    mapRef.current = map;
    map.addControl(new maplibregl.NavigationControl(), "top-right");
    map.on('error', (e) => console.error("MapLibre Error:", e));

    return () => {
      map.remove();
      mapRef.current = null;
    };
  }, []); 

  
  // Effect "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" (async)
  useEffect(() => {
    const map = mapRef.current;
    if (!map || !events) return; 

    const updateMapData = async () => { 
      markersRef.current.forEach(marker => marker.remove());
      markersRef.current = [];
      
      if (events.length === 0) {
        setRouteLegs([]); 
        return; 
      }

      const newMarkers: maplibregl.Marker[] = [];
      events.forEach((event, index) => {
        
        // üëà [REQ 1] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Marker
        const color = LEG_COLORS[index % LEG_COLORS.length];
        
        const popupContent = `...`; // (‡πÇ‡∏Ñ‡πâ‡∏î Popup ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        const markerEl = document.createElement("div");

        // üëà [REQ 1] ‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏•‡∏á‡πÉ‡∏ô HTML ‡∏Ç‡∏≠‡∏á Marker
        markerEl.innerHTML = `
          <div style="
            width: 30px; height: 30px; border-radius: 50%;
            background: ${color}; 
            border: 2px solid white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            display: flex; align-items: center; justify-content: center;
            font-weight: 700; font-size: 14px;
            color: white; cursor: pointer;
          ">
            ${index + 1}
          </div>
        `;
        
        // (‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á Marker ‡πÅ‡∏•‡∏∞ Popup - ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)
        // ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        const popup = new maplibregl.Popup({ offset: 35, closeButton: false })
          .setHTML(`
            <div style="font-family: sans-serif; padding: 5px; max-width: 200px;">
              <strong style="font-size: 14px; color: #333;">${event.title}</strong>
              <p style="font-size: 12px; margin: 4px 0; color: #555;">
                ${event.date} (${event.time})
              </p>
            </div>
          `);
        // ...
        
        const marker = new maplibregl.Marker({ element: markerEl })
          .setLngLat([event.lng, event.lat])
          .setPopup(popup)
          .addTo(map);
        
        newMarkers.push(marker);
      });
      markersRef.current = newMarkers; 

      let legs: any[] = [];
      if (events.length > 1) {
        legs = await drawRoute(map, events); 
      }
      setRouteLegs(legs); // üëà [REQ 2] ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• legs (‡∏ó‡∏µ‡πà‡∏°‡∏µ steps)

      const bounds = new maplibregl.LngLatBounds();
      events.forEach(p => bounds.extend([p.lng, p.lat]));
      if (events.length > 0) {
        map.fitBounds(bounds, { padding: 60 });
      }
    };

    if (map.isStyleLoaded()) {
      updateMapData();
    } else {
      map.once('load', updateMapData);
    }

  }, [events]); 

  
  // ----------------------------------------------------
  // 5. [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] JSX ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏° Dropdown)
  // ----------------------------------------------------
  return (
    <div className="w-full h-full relative flex">
      
      {/* Sidebar (‡πÅ‡∏ú‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢) */}
      <aside className="w-full max-w-sm md:w-[360px] h-full bg-white shadow-xl z-10 flex flex-col">
        {/* Header (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) */}
        <header className="p-4 border-b border-gray-200 flex items-center justify-between flex-shrink-0">
          <h2 className="text-xl font-bold text-gray-800">‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</h2>
          <button
            onClick={onClose}
            className="p-1.5 text-gray-500 rounded-full hover:bg-gray-100 hover:text-gray-800 transition-all"
            aria-label="Close map"
          >
            <X size={22} />
          </button>
        </header>
        
        {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (List) */}
        <div className="flex-1 overflow-y-auto">
          <ol> 
            {events.map((event, index) => {
              const leg = routeLegs[index]; 
              const distanceKm = (leg?.distance / 1000).toFixed(1);
              const durationMin = Math.round(leg?.duration / 60);
              
              // üëà [REQ 1] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
              const color = LEG_COLORS[index % LEG_COLORS.length];
              const isDropdownOpen = openLegIndex === index;

              return (
                <React.Fragment key={index}> 
                  
                  {/* === 1. ‡∏ï‡∏±‡∏ß‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° (Event Item) === */}
                  <li className="p-4 flex gap-4 hover:bg-gray-50">
                    {/* [REQ 1] ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (‡πÉ‡∏™‡πà‡∏™‡∏µ) */}
                    <div 
                      className="flex-shrink-0 w-8 h-8 rounded-full text-white flex items-center justify-center font-bold text-sm shadow"
                      style={{ backgroundColor: color }} // üëà ‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                    >
                      {index + 1}
                    </div>
                    {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) */}
                    <div className="flex-1 min-w-0">
                      <p className="font-semibold text-gray-900 truncate" title={event.title}>
                        {event.title}
                      </p>
                      <div className="text-sm text-gray-600 flex items-center gap-1.5 mt-1">
                        <Calendar size={14} className="flex-shrink-0" />
                        <span>{event.date}</span>
                      </div>
                      <div className="text-sm text-gray-600 flex items-center gap-1.5 mt-1">
                        <Clock size={14} className="flex-shrink-0" />
                        <span>{event.time}</span>
                      </div>
                    </div>
                  </li>

                  {/* === 2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (Travel Leg Item) [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] === */}
                  {leg && ( 
                    <React.Fragment>
                      {/* [REQ 3] ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Dropdown */}
                      <li 
                        className="p-4 pl-16 flex items-center justify-between border-t border-gray-100 bg-blue-50/50 cursor-pointer hover:bg-blue-100/50"
                        onClick={() => setOpenLegIndex(isDropdownOpen ? null : index)} // üëà ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° state
                      >
                        <div className="flex gap-4">
                          {/* ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞ */}
                          <div className="w-8 flex justify-center -translate-x-4">
                            <div className="border-l-2 border-dashed border-gray-300 h-full"></div>
                          </div>
                          {/* ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á */}
                          <div className="flex-1 min-w-0 -ml-4">
                            {/* [REQ 1] ‡πÉ‡∏™‡πà‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ */}
                            <div className="flex items-center gap-1.5 text-sm font-medium" style={{ color: color }}>
                              <Navigation size={14} className="flex-shrink-0" />
                              <span>
                                {distanceKm} ‡∏Å‡∏°.
                                <span className="text-gray-500 font-normal px-1.5">‚Ä¢</span>
                                {durationMin} ‡∏ô‡∏≤‡∏ó‡∏µ
                              </span>
                            </div>
                            <p className="text-xs text-gray-500 mt-1">
                              (‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î {index + 2})
                            </p>
                          </div>
                        </div>
                        {/* [REQ 3] ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£ Dropdown */}
                        <ChevronDown 
                          size={20} 
                          className="text-gray-500 transition-transform flex-shrink-0"
                          style={{ transform: isDropdownOpen ? 'rotate(180deg)' : 'rotate(0deg)' }}
                        />
                      </li>
                      
                      {/* [REQ 2 & 3] ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Dropdown ‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà */}
                      {isDropdownOpen && (
                        <li className="pl-20 pr-4 pb-4 bg-blue-50/50 border-t border-gray-100">
                          <h4 className="font-semibold text-sm text-gray-800 mb-2">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á:</h4>
                          {/* üëà [REQ 2] ‡πÅ‡∏™‡∏î‡∏á Steps */}
                          <ol className="list-decimal list-inside space-y-2 text-sm text-gray-700">
                            {leg.steps.map((step: any, stepIndex: number) => (
                              <li key={stepIndex}>
                                {/* {step.maneuver.modifier ? `${step.maneuver.modifier} ` : ''} */}
                                {/* {step.maneuver.type} */}
                                {/* {console.log(`Hello: ${step.maneuver.modifier ? `${step.maneuver.modifier} ` : ''}${step.maneuver.type}`)} */}
                                {translateInstruction(`${step.maneuver.modifier ? `${step.maneuver.modifier} ` : ''}${step.maneuver.type}`)}
                                {/* {`${step.maneuver.modifier ? `${step.maneuver.modifier} ` : ''}${step.maneuver.type}`} */}
                                {step.name ? ` ‡∏ö‡∏ô ${step.name}` : ''}
                                <span className="text-gray-500"> ({Math.round(step.distance)} ‡∏°.)</span>
                              </li>
                            ))}
                          </ol>
                        </li>
                      )}
                    </React.Fragment>
                  )}
                </React.Fragment>
              )
            })}
            
            {events.length === 0 && (
                <li className="p-4 text-center text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î</li>
            )}
          </ol>
        </div>
      </aside>

      {/* Map Container (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) */}
      <div className="flex-1 h-full relative">
        <div ref={mapContainer} className="w-full h-full" />
      </div>
    </div>
  )
}